Traceback (most recent call last):
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/homebrew/Cellar/python@3.9/3.9.19/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/vibarra/Venv/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from scipy import linalg
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib import colors



def plot_cov(method, splot):
    if method==lda:
        Ellipse(splot, method.means_[0], method.covariance_, 'red')
        Ellipse(splot, method.means_[1], method.covariance_, 'blue')
    else:
        Ellipse(splot, method.means_[0], method.covariance_[0], 'red')
        Ellipse(splot, method.means_[1], method.covariance_[1], 'blue')

# G√©n√©ration des donn√©es

cmap = colors.LinearSegmentedColormap(
    'red_blue_classes',
    {'red': [(0, 1, 1), (1, 0.7, 0.7)],
     'green': [(0, 0.7, 0.7), (1, 0.7, 0.7)],
     'blue': [(0, 0.7, 0.7), (1, 1, 1)]})
plt.cm.register_cmap(cmap=cmap)


#  Gaussiennes multivari√©es, covariances √©gales ou non
def dataset_cov(fixed = True):
    n, dim = 150, 2
    np.random.seed(0)
    if fixed:
        C = np.array([[0., -0.23], [0.83, .23]])
        X = np.r_[np.dot(np.random.randn(n, dim), C),
              np.dot(np.random.randn(n, dim), C) + np.array([1, 1])]
    else:
        C = np.array([[0., -1.], [2.5, .7]]) * 2.
        X = np.r_[np.dot(np.random.randn(n, dim), C),
              np.dot(np.random.randn(n, dim), C.T) + np.array([1, 15])]
    y = np.hstack((np.zeros(n), np.ones(n)))
    return X, y


from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

lda = LinearDiscriminantAnalysis(solver="svd", store_covariance=True)
plt.figure(figsize=(12, 4))

(X,y)=dataset_cov()
y_pred = lda.fit(X,y).predict(X)
splot = plot_data(lda, X,y, y_pred, "Covariances √©gales",1)
plot_cov(lda, splot)
plt.axis('tight')

(X,y)=dataset_cov(fixed=False)
y_pred = lda.fit(X,y).predict(X)
splot = plot_data(lda,X,y, y_pred, "Covariances diff√©rentes",2 )
plot_cov(lda, splot)
plt.axis('tight')
plt.tight_layout()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[2], line 24[0m
[1;32m     17[0m [38;5;66;03m# G√©n√©ration des donn√©es[39;00m
[1;32m     19[0m cmap [38;5;241m=[39m colors[38;5;241m.[39mLinearSegmentedColormap(
[1;32m     20[0m     [38;5;124m'[39m[38;5;124mred_blue_classes[39m[38;5;124m'[39m,
[1;32m     21[0m     {[38;5;124m'[39m[38;5;124mred[39m[38;5;124m'[39m: [([38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m1[39m), ([38;5;241m1[39m, [38;5;241m0.7[39m, [38;5;241m0.7[39m)],
[1;32m     22[0m      [38;5;124m'[39m[38;5;124mgreen[39m[38;5;124m'[39m: [([38;5;241m0[39m, [38;5;241m0.7[39m, [38;5;241m0.7[39m), ([38;5;241m1[39m, [38;5;241m0.7[39m, [38;5;241m0.7[39m)],
[1;32m     23[0m      [38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m: [([38;5;241m0[39m, [38;5;241m0.7[39m, [38;5;241m0.7[39m), ([38;5;241m1[39m, [38;5;241m1[39m, [38;5;241m1[39m)]})
[0;32m---> 24[0m [43mplt[49m[38;5;241;43m.[39;49m[43mcm[49m[38;5;241;43m.[39;49m[43mregister_cmap[49m(cmap[38;5;241m=[39mcmap)
[1;32m     27[0m [38;5;66;03m#  Gaussiennes multivari√©es, covariances √©gales ou non[39;00m
[1;32m     28[0m [38;5;28;01mdef[39;00m [38;5;21mdataset_cov[39m(fixed [38;5;241m=[39m [38;5;28;01mTrue[39;00m):

[0;31mAttributeError[0m: module 'matplotlib.cm' has no attribute 'register_cmap'

