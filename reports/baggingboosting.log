Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.17/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import numpy as np


def plot_decision_boundary(clf, X, y, axes=[-1.5, 2.5, -1, 1.5], 
                           alpha=0.5, contour=True):
    x1s = np.linspace(axes[0], axes[1], 100)
    x2s = np.linspace(axes[2], axes[3], 100)
    x1, x2 = np.meshgrid(x1s, x2s)
    X_new = np.c_[x1.ravel(), x2.ravel()]
    y_pred = clf.predict(X_new).reshape(x1.shape)
    mapp = ListedColormap(['#FF0000', '#00FF00'])
    map = ListedColormap(['#fafab0','#9898ff','#a0faa0'])
    plt.contourf(x1, x2, y_pred, alpha=1, cmap='Pastel2')
    if contour:
        plt.contour(x1, x2, y_pred, alpha=0.7)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=mapp,edgecolors='k')
    plt.axis(axes)
    plt.xlabel(r"$x_1$", fontsize=14)
    plt.ylabel(r"$x_2$", fontsize=14, rotation=0)

from sklearn.model_selection import train_test_split
from sklearn.datasets import make_moons

X, y = make_moons(n_samples=700, noise=0.30, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)


bag_clf = BaggingClassifier(
    DecisionTreeClassifier(splitter="random", max_leaf_nodes=16, random_state=42),
    n_estimators=500, max_samples=1.0, bootstrap=True, n_jobs=-1, random_state=42)
bag_clf.fit(X_train, y_train)
y_pred = bag_clf.predict(X_test)

plot_decision_boundary(bag_clf, X_train, y_train,contour=False)
plt.title("Bagging d'arbres de d√©cision")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<module>[0;34m[0m
[1;32m     34[0m bag_clf[38;5;241m.[39mfit(X_train, y_train)
[1;32m     35[0m y_pred [38;5;241m=[39m bag_clf[38;5;241m.[39mpredict(X_test)
[0;32m---> 37[0m [43mplot_decision_boundary[49m[43m([49m[43mbag_clf[49m[43m,[49m[43m [49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43mcontour[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[1;32m     38[0m plt[38;5;241m.[39mtitle([38;5;124m"[39m[38;5;124mBagging d[39m[38;5;124m'[39m[38;5;124marbres de d√©cision[39m[38;5;124m"[39m)

Input [0;32mIn [1][0m, in [0;36mplot_decision_boundary[0;34m(clf, X, y, axes, alpha, contour)[0m
[1;32m     12[0m X_new [38;5;241m=[39m np[38;5;241m.[39mc_[x1[38;5;241m.[39mravel(), x2[38;5;241m.[39mravel()]
[1;32m     13[0m y_pred [38;5;241m=[39m clf[38;5;241m.[39mpredict(X_new)[38;5;241m.[39mreshape(x1[38;5;241m.[39mshape)
[0;32m---> 14[0m mapp [38;5;241m=[39m [43mListedColormap[49m([[38;5;124m'[39m[38;5;124m#FF0000[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m#00FF00[39m[38;5;124m'[39m])
[1;32m     15[0m [38;5;28mmap[39m [38;5;241m=[39m ListedColormap([[38;5;124m'[39m[38;5;124m#fafab0[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124m#9898ff[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124m#a0faa0[39m[38;5;124m'[39m])
[1;32m     16[0m plt[38;5;241m.[39mcontourf(x1, x2, y_pred, alpha[38;5;241m=[39m[38;5;241m1[39m, cmap[38;5;241m=[39m[38;5;124m'[39m[38;5;124mPastel2[39m[38;5;124m'[39m)

[0;31mNameError[0m: name 'ListedColormap' is not defined
NameError: name 'ListedColormap' is not defined

